---
title: "Tutorial_7"
date: "10/5/2021"
output: html_document
editor_options: 
  chunk_output_type: inline
---
The R package `tfa` implements a factor analysis (FA) algorithm for temporal DNA or ancient DNA (aDNA) samples, adjusting individual scores for the effect of allele frequency drift through time. 

Similarly to PCA, `tfa` projects individuals into a lower dimensional space allowing a visual investigation of population structure corrected for temporal drift. Based on the adjusted factors, the program can estimate ancestry proportions for a target population or a subset of target individuals given specified source populations.

The FA model uses a decomposition of the data matrix into a product of factor and loading matrices plus correction factors and residual noise. The correction factors represented the main improvement over classical FA or principal component analysis (PCA). In `tfa` the correction factors are related to the covariance function of the stochastic drift process. 
The default model for the covariance function is the Brownian model. This default corresponds to the diffusion approximation of allele frequency drift in a random mating population conditional on the non-fixation of alleles in the population. The approach is flexible and allows expert users to customize their own model and implement other covariance functions. The correction factors are obtained after a spectral decomposition of the covariance matrix, and the corresponding effect size estimates are obtained in a Bayesian framework. Explicit solutions are obtained for the effect size estimates and corrected factors. The hyperparameters for the FA model are the drift parameter and the number of latent factors.

The functions index:

*England_BA* - Ancient human DNA samples from David Reich's lab   
*ancestry_coefficients()* - Compute ancestry coefficients from specified source populations   
*as.tfa_metadata()* - Convert a data frame into an object of class tfa_metadata   
*coverage_adjust()* - Adjust ancient genotypes for coverage bias    
*tfa()* - Factor analysis of temporal or ancient DNA samples    

#Factor analysis of aDNA samples

We will use the tfa to display a geometric representation of 118 aDNA samples from prehistoric Eurasia. Ten thousands SNP genotypes were filtered for high-quality, relatively high coverage and low number of missing values. This example data set was extracted from a database available from David Reichâ€™s lab considering individuals from Neolithic and Bronze Age Great Britain (BA), Steppe (Yamnaya), Anatolia (Early Farmers), and from Serbia (Western Hunter-Gatherers).

```{r fig.height=3, fig.width=5, message=FALSE, warning=FALSE}
library(tfa)
library(ggplot2)
data(england_ba)
genotype <- England_BA$genotype
View(head(genotype))

meta <- England_BA$meta
View(head(meta))

age <- England_BA$age
meta$age = age
ggplot(meta,
       aes(x=reorder(Group.ID,age,(mean)),y=age, fill=Group.ID))+
       geom_boxplot()+
       theme_classic()+
       xlab('Group')+
       theme(axis.text.x = element_text(angle = 45, hjust = 1))+
       theme(legend.position = "none")+
       scale_y_continuous(breaks = seq(3000,11000, by=1000))

plot(table(meta$Group.ID), las = 3, cex.axis = .5, ylab = "Count", lwd = 5, col = "blue")
```

Prehistoric dates for each sample are provided in years cal BP (Before Present).

```{r fig.height=3, fig.width=5}
hist(age, col = "lightblue", xlab = "Age cal BP")
```

```{r}
#`prcomp` performs a principal components analysis on the given data matrix and returns the results as an object of class prcomp.
  pca <- prcomp(genotype)
  plot(pca, col = "palegreen")
```

A first step of analysis consists of adjusting the genotypic data for coverage. For the filtered genotypes represented here, the impact of coverage bias on analyses is not substantial. In general however, coverage may strongly bias the results of factor analyses, and it is important to consider adjusting for it. 

To adjust for coverage, the tfa package contains the function coverage_adjust() which implements a correction based on a latent factor regression model.
Coverage here represents *(number of sequenced bases)/(genome size)*

For the latent factor regression model it is better to choose more factors than the number of PC axes estimated from the original data.According to the PCA result, four factors could be used in the latent factor regression model. 


```{r}
coverage <- meta$Coverage
geno <- coverage_adjust(genotype, coverage, K = 4, log = TRUE)
```

The object mod contains k factors adjusted for temporal drift in allele frequency. 

```{r}
  mod  <- tfa(Y = geno,
              sample_ages = age,
              k = 3,
              lambda = 5e-1) #The drift parameter
```

The results are contained in argument `mod$u`.
The object `mod$u` can be used to visualize the samples in the space defined by the first axes. 

The result looks like a PC plot showing the relative positions of Great Britain samples with respect to their putative sources of ancestry.

```{r, message=FALSE, warning=FALSE}
  plot(mod$u, pch = 19, cex = 2, col = "grey90", xlab = "Factor 1", ylab = "Factor 2")
  center_yamnaya <- apply(mod$u[meta$Group.ID == "Russia_Yamnaya",], 2, mean)
  center_anatolia <- apply(mod$u[meta$Group.ID == "Anatolia_N",], 2, mean)
  center_hg <- apply(mod$u[meta$Group.ID == "Serbia_HG",], 2, mean)

  lines(rbind(center_yamnaya, center_anatolia, center_hg, center_yamnaya))

  points(mod$u[meta$Group.ID == "Russia_Yamnaya",], pch = 8, cex = .6, col = "darkblue")
  points(mod$u[meta$Group.ID == "Anatolia_N",], pch = 8, cex = .6, col = "salmon3")
  points(mod$u[meta$Group.ID ==  "Serbia_HG",], pch = 8, cex = .6, col = "olivedrab")
  points(mod$u[meta$Group.ID == "England_Bell_Beaker",], pch = 19, cex = .6, col = "orange")
  points(mod$u[meta$Group.ID == "England_BA",], pch = 19, cex = .6, col = "yellow3")
  points(mod$u[meta$Group.ID %in% c("England_N", "Scotland_N"),], pch = 19, cex = .6, col = "salmon1")

  legend(x = 20, y = -15, cex = .6,
         legend = c("Early Farmers", "Hunter Gatherers", "Steppe"),
         col = c("salmon3", "olivedrab", "darkblue"), pch = 8)
  legend(x = 10, y = -15, cex = .6,
         legend = c("Neolithic GB", "Bronze Age GB", "Bell Beaker"),
         col = c("salmon1", "yellow3", "orange"), pch = 19)
```

#Ancestry coefficients

In addition to geometric representations, `tfa` can provide estimates of ancestry proportions for a target population or for a list of target individuals given a list of source populations. 

The number of sources must be less or equal than the number of factors plus one (i.e. k+1). For this analysis, the metadata object must contain a column named Instance.ID indicating the ID of each individual and another column named Group.ID indicating the group ID of each individual in the study.

```{r}
colnames(meta)
# Convert the meta data.frame to an object of class tfa_metadata
metadata <- as.tfa_metadata(meta)
```
Potential source populations: Anatolia_N (Early Farmers), Russia_Yamnaya (Steppe Pastoralists), Serbia_HG (Western Hunter-Gatherers).
Target populations: England_Bell_Beaker and England_BA (Bronze age)

```{r}
  target = c("England_Bell_Beaker", "England_BA")
  source = c("Anatolia_N", "Russia_Yamnaya", "Serbia_HG")
  ancestry_coefficients(model = mod,
                        metadata = metadata,
                        source = source,
                        target = target)
```

The Bell Beaker samples share a large fraction of their ancestry with Steppe pastoralists. Changing the Anatolian population for another population of Early Farmers (England_N) can confirm this result.

```{r}
#The `ancestry_coefficients` function uses basic linear algebra to compute the coordinates of each target population in the system formed by the centers of source populations.
  ancestry_coefficients(model = mod,
                        metadata = metadata,
                        source = c("England_N", "Russia_Yamnaya", "Serbia_HG"),
                        target = target)
```

The result shows that the amount of ancestry shared with the hunter-gatherers (Serbia_HG) reduces when farmers are sampled from a closer geographic source (Instead of Anatolia_N we took England N). This suggests that the hunter-gatherer contribution to the England Neolithic gene pool may be substantial. To check this hypothesis, consider England_N as the target with the set of sources considered at the start.

```{r}
ancestry_coefficients(model = mod,
                        metadata = metadata,
                        source = c("Anatolia_N", "Russia_Yamnaya","Serbia_HG"),
                        target = "England_N")
```

A negative value for the Russia_Yamnaya source suggests that this source did not contribute to the gene pool of Neolithic England samples, and that it should be removed from the set of sources.

```{r}
  ancestry_coefficients(model = mod,
                        metadata = metadata,
                        source = c("Anatolia_N", "Serbia_HG"),
                        target = "England_N")
```

The result indeed suggests a substantial contribution of hunter-gatherers to Neolithic England farmers.

The analysis can be summarized in a table of ancestry coefficients as follows:
```{r}

ancestry.B <- ancestry_coefficients(model = mod,
                                  metadata = metadata,
                                  source = c("Serbia_HG", "Anatolia_N", "Russia_Yamnaya"),
                                  target = c("England_Bell_Beaker", "England_BA"))

ancestry.N <- ancestry_coefficients(model = mod,
                                  metadata = metadata,
                                  source = c("Serbia_HG", "Anatolia_N"),
                                  target = c("England_N", "Scotland_N"))

ancestry.N <- cbind(ancestry.N, c(0,0))
ancestry <- rbind(ancestry.N, ancestry.B)
ancestry
```


```{r, message=FALSE, warning=FALSE}
    barplot(t(ancestry),
          col = c("olivedrab", "salmon3", "darkblue"),
          main = "Ancestry coefficients")
#    par(xpd=TRUE)
#    legend(5,1,
#           legend=c("Serbia_HG","Anatolia_N","Russia_Yamnaya"),
#           cex = 0.75,
#           fill = c("olivedrab", "salmon3", "darkblue"))
    
```

More information regarding the `tfa` package can be found [here:](https://rdrr.io/github/bcm-uga/tfa/man/tfa.html). 
Broader explanation of all the parameters can be found [here]:(https://www.biorxiv.org/content/10.1101/801324v3.full.pdf)