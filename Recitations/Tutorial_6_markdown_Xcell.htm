---
title: "Tutorial_6_Xcell"
date: "5/2/2021"
output: html_document
editor_options: 
  chunk_output_type: console
---

xCell is a computational method that converts gene expression profiles to enrichment scores of 64 immune and stroma cell types across samples. 

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}

library(xCell)
```

If the gene expression data are from a microarray, no normalization is required. If the gene expression data are from a sequencing platform, values must be normalized to gene length (i.e., RPKM, TPM, FPKM). 

```{r, eval=TRUE, echo=FALSE, warning=FALSE, message=FALSE}
# The list of genes
xCell.data$genes
#The full list of signatures
xCell.data$signatures
```


The pipeline presented ahead reads a gene expression matrix and returns an enrichment score for each of the 64 cell types across the input gene expression samples. 
For its calculations, xCell considers 10,808 common genes. xCell uses multiple signatures for each cell type. 
Altogether, there are 489 signatures that correspond to the 64 cell types.

The scores are computed using single-sample gene set enrichment analysis (ssGSEA). For each cell type, the average of the multiple scores from the multiple corresponding signatures is calculated.

xCell performs best with heterogenous dataset. Thus, it is recommended to use all available data combined in one run and not to break down to smaller subsets.

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}
#The study contains 104 samples with gene expression and immunoprofiling counts.
sdy <- readRDS("C:/Users/user/Documents/Tutorial_6/sdy420.rds")
sample_info<-read.csv("C:/Users/user/Documents/Tutorial_6/sample_info.csv")

#data.table::setorder(sample_info, cols = colnames(sdy), #order=1L, na.last=FALSE)

cell.types.use = intersect(colnames(xCell.data$spill.array$K),rownames(sdy$fcs))

scores <- xCellAnalysis(sdy$expr, rnaseq=F, cell.types.use = cell.types.use)
```

Using these scores, we can now find the correlation between the xCell scores and the cell types fractions from the CyTOF immunoprofilings:

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}
library(psych)
library(ggplot2)
fcs = sdy$fcs[rownames(scores),colnames(scores)]
res = corr.test(t(scores),t(fcs),adjust='none')

qplot(x=rownames(res$r),y=diag(res$r),
      fill=diag(res$p)<0.05,
      geom="col",
      main="SDY420 association with immunoprofiling",
      ylab="Pearson R", xlab="") + 
      labs(fill = "p-value<0.05") +
      theme_classic() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
# p-value is the probability that the null hypothesis is true. In our case, it represents the probability that the correlation between x and y in the sample data occurred by chance. 
```

This code generated a bar plot for the correlation of the xCell scores with the expected fractions from the immunoprofiling. We see significant correlations (p-value <0.05) in 13 of 18 cell types, and high correlations (R > 0.5) in 7 cell types. It is important to note that the xCell produces enrichment scores and not proportions of cell types, thus it is not expected that the scores will be similar to the CyTOF proportions.

Lets see Spearman correaltion coefficient of xCell scores with age.

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}

#Correlation coefficients of xCell scores with age in the 104 samples available in SDY420. Only plasma cells scores present a false discovery rate (FDR) < 0.05

age = corr.test(t(scores), sample_info$AGE,
method="spearman", adjust = "fdr")
qplot(x=rownames(age$r), 
      y=age$r, 
      fill=age$p<0.05,
      geom="col",
      main="Association with age",
      xlab="", ylab="Spearman R") +
      labs(fill = "FDR<0.05") + 
      theme_classic() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

A scatter plot of xCell scores for plasma cells (x-axis) and age (y-axis).

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}

qplot(x=scores['Plasma cells',], y=sample_info$AGE,
xlab='Plasma cells (xCell)', ylab='Age') + theme_classic()
```

We can also perform association with gender. Since the xCell scores do not follow a normal distribution, we use a nonparametric test (Wilcoxon rank-sum test). Here, we calculate p-values for all cell types association with gender, and then adjust the p-values with FDR correction:

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}

p = p.adjust(apply(scores,1,FUN=function(x)
    wilcox.test(x[sample_info$GENDER=='Male'],
    x[sample_info$GENDER=='Female'])$p.value),method='fdr')
```
One way to present this analysis is in the same manner as we presented above, using a bar plot, for example, presenting the −log10 of the adjusted p-values

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}
qplot(x=names(p), 
      y=-log10(p), 
      fill=p, geom='col',
      main='Association with gender', 
      xlab="",
      ylab='-log10(adjusted p-val') + theme_classic() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      theme(legend.position = "none")
```

The most significant association of scores with gender is of regulatory T cells (Tregs). We present such an association with box plots.

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}
df = data.frame(Tregs = scores['Tregs',],
                Gender = sample_info$GENDER, 
                Cells = colnames(scores))

qplot(data=df,y=Tregs,x=Gender,geom='boxplot', 
      fill=Gender, alpha=0.5, ylab='Tregs (xCell)',
      xlab='Gender') +
      geom_point(position=position_jitterdodge()) +
      theme_classic() + theme(legend.position = "none")


```

Another way to present analysis between two groups is using a volcano plot, which presents the log fold-change vs. the −log10 p-value. We can use the following code to create such a plot:

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("EnhancedVolcano")

library("EnhancedVolcano")
df = data.frame(p = p, fc = log2(apply(scores,1,
FUN=function(x) mean(x[sample_info$GENDER=='Female'])/
mean(x[sample_info$GENDER=='Male']))))
EnhancedVolcano(df,lab = rownames(df),x='fc',y='p',
                pCutoff = 0.2,FCcutoff = 0.25, ylim=c(0,1.5),
                title = 'xCell scores: Female vs. males')

```

Finally, we can present a summary of all the scores in a heatmap. Since some cells have low scores and some have high scores, we scale the rows to an average of zero and a standard deviation of 1.

```{r, eval=TRUE, echo=TRUE, warning=FALSE, message=FALSE}

library(pheatmap)
#The scale function in R performs standard scaling to the columns of the input data, which first subtracts the column means from the columns (center step) and then divides the centered columns by the column standard deviations (scale step).
scaled.scores <- t(scale(t(scores)))
scaled.scores[scaled.scores > 3] = 2
scaled.scores[scaled.scores < -3] = -2
annotation_col<-as.data.frame(sample_info[,c("AGE","GENDER","RACE")],drop=F)
rownames(annotation_col) = colnames(scaled.scores)
pheatmap(scaled.scores,show_colnames = F,
         annotation_col=annotation_col,
         clustering_method= 'ward.D2')

```


More information regarding the package and the usage can be found 
[here](https://link.springer.com/protocol/10.1007/978-1-0716-0327-7_19)