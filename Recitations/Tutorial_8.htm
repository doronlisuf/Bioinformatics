---
title: "Tutorial_8"
date: "25/5/2021"
output: html_document
editor_options: 
  chunk_output_type: console
---

The aim of Genome‐wide association studies (GWAS) is to identify single nucleotide polymorphisms (SNPs) of which the allele frequencies vary systematically as a function of phenotypic trait values. 

Identification of trait‐associated SNPs may subsequently reveal new insights into the biological mechanisms underlying these phenotypes.

We will use the maize data from the European Union project DROPS (DROught-tolerant yielding PlantS). The aim of the project better understanding of yield control under water deficit, based on the premise that any so-called trait/gene of drought tolerance can have positive, negative or no effect depending on the considered drought scenario.

The data is available [here](https://data.inrae.fr/dataset.xhtml?persistentId=doi:10.15454/IASSTN), more details regarding the data is [here](https://biometris.github.io/statgenGWAS/reference/dropsData.html) and the relevant data sets are included as data.frames in the statgenGWAS package.

```{r}
library(statgenGWAS)
#coded marker information for 41722 SNPs and 246 genotypes.
data(dropsMarkers)
#information about the positions of those SNPs on the B73 reference genome V2.
data(dropsMap)
#data for the genotypic means with one value per experiment per genotype, for eight traits.
data(dropsPheno)
```


Data for GWAS is stored in object from gData (genomic Data) class for convenience.

Let's create create a gData object from the raw data that can be used for the GWAS analysis. 

The gData object consists of a few components:
1. The Marker map (`map`) - is used to describe the physical positions of the markers on the chromosomes. The data consists of two columns, `chr` for the name or number of the chromosome and `pos` for the position of the marker on the chromosome.    
2. The Marker matrix (`marker`) - contains the names of the markers in column names and the genotypes in the row names. Markers can either be coded as character strings or as numerical values.   
3. Phenotypic data (`pheno`) - can either be a single data.frame or a list of data.frames for storing data for different trials or different summarizations of the original data. The first column of all elements of `pheno` should be genotype and all the other columns should represent different traits.    

So lets start creating the gData object.


The map used as input when creating a gData object, should at least have the columns “chr” and “pos” and the row names should be the names of the SNPs. Other columns are ignored when creating a gData object, so they can be left as they are.

```{r}
head(dropsMap)
## Add genotypes as row names of dropsMap.
rownames(dropsMap) <- dropsMap[["SNP.names"]]
## Rename Chomosome and Position columns.
colnames(dropsMap)[match(c("Chromosome", "Position"), colnames(dropsMap))] <- c("chr", "pos")
head(dropsMap)
```

When creating a gData object, the markers should be input as a matrix or data.frame with genotypes in the row names.

```{r}
## Add genotypes as row names of dropsMarkers and get rid of "Ind" column.
rownames(dropsMarkers) <- dropsMarkers[["Ind"]]
dropsMarkers <- dropsMarkers[colnames(dropsMarkers) != "Ind"]
```

Now a gData object containing only map and marker information can be created. This object can be used as a base. Phenotypic data may be added later on.

```{r}
## Create a gData object containing map and marker information.
gDataDrops <- createGData(geno = dropsMarkers, map = dropsMap)
```

The next step involves adding phenotypic data to the gData object just created. 
`dropsPheno` contains genotypic means for 28 trials. To be able to run a GWAS analysis per trial the data has to be added as a list of 28 data.frames. 
These data.frames should have “genotype” as their first column and may only contain traits after that. Other columns need to be dropped.

```{r}
head(dropsPheno)
## Rename Variety_ID to genotype.
colnames(dropsPheno)[colnames(dropsPheno) == "Variety_ID"] <- "genotype"
## Select relevant columns and convert data to a list.
#split divides the data in the vector x into the groups defined by f. 

dropsPhenoList <- split(x = dropsPheno[c("genotype", "grain.yield",
                                         "grain.number", "seed.size",
                                         "anthesis", "silking", "plant.height",
                                         "tassel.height", "ear.height")], 
                        f = dropsPheno[["Experiment"]])
## Add phenotypic data to gDataDrops.
gDataDrops <- createGData(gData = gDataDrops, pheno = dropsPhenoList)
```

The phenotypic data was added to gDataDrops using the same function that was used for creating the object. Adding an argument `gData` to the function call will add new data to an existing gData object.

```{r}
summary(gDataDrops, trials = "Gai12R")
```

Marker data has to be numerical in order to do GWAS analysis. This can be achieved using the `codeMarkers` function. The marker data available for the DROPS project has already been converted from A/T/C/G to 0/1/2. The codeMarkers function in the package can still be used to further clean the markers, e.g. by removing the duplicate SNPs.

```{r}
gDataDropsDedup <- codeMarkers(gDataDrops, impute = FALSE, verbose = TRUE) 

```

The cleaned gData object can be used for performing single trait GWAS analysis. With all the default settings the analysis already performs quite well. In the examples below the trial Mur13W is used to demonstrate the options of the `runSingleTraitGwas` function.

```{r}
## Run single trait GWAS for traits 'grain.yield' and 'anthesis' for trial Mur13W.
GWASDrops <- runSingleTraitGwas(gData = gDataDropsDedup,
                                trials = "Mur13W",
                                traits = c("grain.yield", "anthesis"))
```



```{r}

print(head(GWASDrops$GWAResult$Mur13W), row.names = FALSE)

```
`allFreq`	allele frequency of the SNP
`pValue`	P-value for the SNP
`effect`	effect of the SNP on the trait value
`effectSe`	standard error of the effect of the SNP on the trait value
`LOD`	LOD score for the SNP, defined as −log10(pValue)
`RLR2`	likelihood-ratio-based R2

```{r}
summary(GWASDrops)
```

`signSnp`: a list of data.tables, one for each trial for which the analysis was run, containing the significant SNPs.

```{r}

print(GWASDrops$signSnp$Mur13W, row.names = FALSE)

```
`propSnpVar` -	proportion of the variance explained by the SNP

###GWAS plots

####QQ-plot

From the LOD-scores calculated in the GWAS analysis, a QQ-plot is generated with observed LOD-scores versus expected LOD-scores.
LOD(logarithm of the odds) score for the SNP is defined as −log10(pValue).


```{r}
## Plot a QQ-plot of GWAS Drops.
plot(GWASDrops, plotType = "qq", trait = "grain.yield")
```

Most of the SNPs are expected to have no effect on a trait, resulting in P-values uniformly distributed on [0,1], and leading to the identity function (y=x) on the −log10(p) scale. As in the plot below, deviations from this line should only occur on the right side of the plot, for a small number of SNPs with an effect on the phenotype (and possibly SNPs in linkage disequilibrium (LD)).

A reminder - Linkage disequilibrium (LD) is a measure of non-random association between alleles at different loci at the same chromosome in a given population.

SNPs are in LD when the frequency of association of their alleles is higher than expected under random assortment. 

###Manhattan plot

Manhattan Plot allows us to plot the marker positions and corresponding LOD-scores.


```{r}
## Plot a manhattan plot of GWAS Drops.
plot(GWASDrops, plotType = "manhattan", trait = "grain.yield")
```

You can set an alternative significance threshold and a subset of chromosomes for GWAS analysis visualization .

```{r}
## Plot a manhattan plot of GWAS Drops.
## Set significance threshold to 4 and only plot chromosomes 6 to 8.
plot(GWASDrops, plotType = "manhattan", trait = "grain.yield", yThr = 4, chr = 6:8)
```

If the number of SNPs gets large, the plotting might get slow. This can be dealt with by setting the parameter lod. When doing so, for the SNPs with a LOD-value below lod, only 5% will be plotted. The chance of a SNP being plotted is proportional to its LOD-value. SNPs with a higher LOD have a higher chance of being plotted. 

```{r}
## Plot a manhattan plot of GWAS Drops.
## Plot only 5% of SNPs with a LOD below 3.
set.seed(1)
plot(GWASDrops, plotType = "manhattan", trait = "grain.yield", lod = 3)
```

###QTL plot

A quantitative trait locus (QTL) is a region of DNA which is associated with a particular phenotypic trait, which varies in degree and which can be attributed to the product of two or more genes.

In this plot the significant SNPs are marked by circles at their genomic positions, with diameter proportional to the estimated effect size. This is done for multiple traits with the genomic position on the x-axis, which are displayed horizontally above each other and can thus be compared.

Circle diameters are proportional to the absolute value of allelic effect. Colors indicate the direction of the effect: 
Green - when the allele increases the trait value.
Blue - when the allele decreases the trait value.

In this case, for “anthesis” there are no significant SNPs.To change the threshold when plotting without having to redo the GWAS analysis, use the parameter yThr. 

Since the traits are measured on a different scale, the effect estimates cannot be compared. For better comparison, one can set normalize = TRUE, which divides the estimates by the standard deviation of the phenotype. Now the effects are on the same scale and comparable.

```{r}
## Plot a qtl plot of GWAS Drops for Mur13W.
## Set significance threshold to 4 and normalize effect estimates.
plot(GWASDrops, plotType = "qtl", yThr = 4, normalize = TRUE)
```

The analysis can be performed for more than one trait in a single function call. Not specifying traits at all will perform the analysis for all traits that are present in the phenotypic data in the gData object. The results will be combined in a single output object with the traits specified in the column trait in GWAResult and signSnp within this object. 
Running for multiple trials is also possible and will generate a list of outputs within GWAResult and signSnp in the output object. Not specifying trials will run the GWAS analysis for all trials in the phenotypic data in the gData object.
